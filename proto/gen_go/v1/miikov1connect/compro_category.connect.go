// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/compro_category.proto

package miikov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	v1 "proto/gen_go/miiko/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ComproCategoryServiceName is the fully-qualified name of the ComproCategoryService service.
	ComproCategoryServiceName = "miiko.v1.ComproCategoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ComproCategoryServiceCategoryGetProcedure is the fully-qualified name of the
	// ComproCategoryService's CategoryGet RPC.
	ComproCategoryServiceCategoryGetProcedure = "/miiko.v1.ComproCategoryService/CategoryGet"
	// ComproCategoryServiceCategoryPostProcedure is the fully-qualified name of the
	// ComproCategoryService's CategoryPost RPC.
	ComproCategoryServiceCategoryPostProcedure = "/miiko.v1.ComproCategoryService/CategoryPost"
	// ComproCategoryServiceTopicGetProcedure is the fully-qualified name of the ComproCategoryService's
	// TopicGet RPC.
	ComproCategoryServiceTopicGetProcedure = "/miiko.v1.ComproCategoryService/TopicGet"
)

// ComproCategoryServiceClient is a client for the miiko.v1.ComproCategoryService service.
type ComproCategoryServiceClient interface {
	CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error)
	CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error)
	TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error)
}

// NewComproCategoryServiceClient constructs a client for the miiko.v1.ComproCategoryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewComproCategoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ComproCategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &comproCategoryServiceClient{
		categoryGet: connect_go.NewClient[emptypb.Empty, v1.CategoryGetResponse](
			httpClient,
			baseURL+ComproCategoryServiceCategoryGetProcedure,
			opts...,
		),
		categoryPost: connect_go.NewClient[v1.CategoryPostRequest, emptypb.Empty](
			httpClient,
			baseURL+ComproCategoryServiceCategoryPostProcedure,
			opts...,
		),
		topicGet: connect_go.NewClient[v1.TopicGetRequest, v1.TopicGetResponse](
			httpClient,
			baseURL+ComproCategoryServiceTopicGetProcedure,
			opts...,
		),
	}
}

// comproCategoryServiceClient implements ComproCategoryServiceClient.
type comproCategoryServiceClient struct {
	categoryGet  *connect_go.Client[emptypb.Empty, v1.CategoryGetResponse]
	categoryPost *connect_go.Client[v1.CategoryPostRequest, emptypb.Empty]
	topicGet     *connect_go.Client[v1.TopicGetRequest, v1.TopicGetResponse]
}

// CategoryGet calls miiko.v1.ComproCategoryService.CategoryGet.
func (c *comproCategoryServiceClient) CategoryGet(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error) {
	return c.categoryGet.CallUnary(ctx, req)
}

// CategoryPost calls miiko.v1.ComproCategoryService.CategoryPost.
func (c *comproCategoryServiceClient) CategoryPost(ctx context.Context, req *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.categoryPost.CallUnary(ctx, req)
}

// TopicGet calls miiko.v1.ComproCategoryService.TopicGet.
func (c *comproCategoryServiceClient) TopicGet(ctx context.Context, req *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error) {
	return c.topicGet.CallUnary(ctx, req)
}

// ComproCategoryServiceHandler is an implementation of the miiko.v1.ComproCategoryService service.
type ComproCategoryServiceHandler interface {
	CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error)
	CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error)
	TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error)
}

// NewComproCategoryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewComproCategoryServiceHandler(svc ComproCategoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ComproCategoryServiceCategoryGetProcedure, connect_go.NewUnaryHandler(
		ComproCategoryServiceCategoryGetProcedure,
		svc.CategoryGet,
		opts...,
	))
	mux.Handle(ComproCategoryServiceCategoryPostProcedure, connect_go.NewUnaryHandler(
		ComproCategoryServiceCategoryPostProcedure,
		svc.CategoryPost,
		opts...,
	))
	mux.Handle(ComproCategoryServiceTopicGetProcedure, connect_go.NewUnaryHandler(
		ComproCategoryServiceTopicGetProcedure,
		svc.TopicGet,
		opts...,
	))
	return "/miiko.v1.ComproCategoryService/", mux
}

// UnimplementedComproCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedComproCategoryServiceHandler struct{}

func (UnimplementedComproCategoryServiceHandler) CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.ComproCategoryService.CategoryGet is not implemented"))
}

func (UnimplementedComproCategoryServiceHandler) CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.ComproCategoryService.CategoryPost is not implemented"))
}

func (UnimplementedComproCategoryServiceHandler) TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.ComproCategoryService.TopicGet is not implemented"))
}
