// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/miiko.proto

package miikov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ningenMe/miiko-api/proto/gen_go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MiikoServiceName is the fully-qualified name of the MiikoService service.
	MiikoServiceName = "miiko.v1.MiikoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MiikoServiceCategoryGetProcedure is the fully-qualified name of the MiikoService's CategoryGet
	// RPC.
	MiikoServiceCategoryGetProcedure = "/miiko.v1.MiikoService/CategoryGet"
	// MiikoServiceCategoryPostProcedure is the fully-qualified name of the MiikoService's CategoryPost
	// RPC.
	MiikoServiceCategoryPostProcedure = "/miiko.v1.MiikoService/CategoryPost"
	// MiikoServiceTopicGetProcedure is the fully-qualified name of the MiikoService's TopicGet RPC.
	MiikoServiceTopicGetProcedure = "/miiko.v1.MiikoService/TopicGet"
)

// MiikoServiceClient is a client for the miiko.v1.MiikoService service.
type MiikoServiceClient interface {
	CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error)
	CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error)
	TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error)
}

// NewMiikoServiceClient constructs a client for the miiko.v1.MiikoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMiikoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MiikoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &miikoServiceClient{
		categoryGet: connect_go.NewClient[emptypb.Empty, v1.CategoryGetResponse](
			httpClient,
			baseURL+MiikoServiceCategoryGetProcedure,
			opts...,
		),
		categoryPost: connect_go.NewClient[v1.CategoryPostRequest, emptypb.Empty](
			httpClient,
			baseURL+MiikoServiceCategoryPostProcedure,
			opts...,
		),
		topicGet: connect_go.NewClient[v1.TopicGetRequest, v1.TopicGetResponse](
			httpClient,
			baseURL+MiikoServiceTopicGetProcedure,
			opts...,
		),
	}
}

// miikoServiceClient implements MiikoServiceClient.
type miikoServiceClient struct {
	categoryGet  *connect_go.Client[emptypb.Empty, v1.CategoryGetResponse]
	categoryPost *connect_go.Client[v1.CategoryPostRequest, emptypb.Empty]
	topicGet     *connect_go.Client[v1.TopicGetRequest, v1.TopicGetResponse]
}

// CategoryGet calls miiko.v1.MiikoService.CategoryGet.
func (c *miikoServiceClient) CategoryGet(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error) {
	return c.categoryGet.CallUnary(ctx, req)
}

// CategoryPost calls miiko.v1.MiikoService.CategoryPost.
func (c *miikoServiceClient) CategoryPost(ctx context.Context, req *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.categoryPost.CallUnary(ctx, req)
}

// TopicGet calls miiko.v1.MiikoService.TopicGet.
func (c *miikoServiceClient) TopicGet(ctx context.Context, req *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error) {
	return c.topicGet.CallUnary(ctx, req)
}

// MiikoServiceHandler is an implementation of the miiko.v1.MiikoService service.
type MiikoServiceHandler interface {
	CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error)
	CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error)
	TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error)
}

// NewMiikoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMiikoServiceHandler(svc MiikoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MiikoServiceCategoryGetProcedure, connect_go.NewUnaryHandler(
		MiikoServiceCategoryGetProcedure,
		svc.CategoryGet,
		opts...,
	))
	mux.Handle(MiikoServiceCategoryPostProcedure, connect_go.NewUnaryHandler(
		MiikoServiceCategoryPostProcedure,
		svc.CategoryPost,
		opts...,
	))
	mux.Handle(MiikoServiceTopicGetProcedure, connect_go.NewUnaryHandler(
		MiikoServiceTopicGetProcedure,
		svc.TopicGet,
		opts...,
	))
	return "/miiko.v1.MiikoService/", mux
}

// UnimplementedMiikoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMiikoServiceHandler struct{}

func (UnimplementedMiikoServiceHandler) CategoryGet(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.CategoryGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.MiikoService.CategoryGet is not implemented"))
}

func (UnimplementedMiikoServiceHandler) CategoryPost(context.Context, *connect_go.Request[v1.CategoryPostRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.MiikoService.CategoryPost is not implemented"))
}

func (UnimplementedMiikoServiceHandler) TopicGet(context.Context, *connect_go.Request[v1.TopicGetRequest]) (*connect_go.Response[v1.TopicGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("miiko.v1.MiikoService.TopicGet is not implemented"))
}
